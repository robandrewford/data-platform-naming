[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "data-platform-naming"
version = "0.1.0"
description = "Battle-tested AWS + Databricks resource naming automation with ACID transactions"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = [
    "aws",
    "databricks",
    "naming-conventions",
    "infrastructure",
    "data-engineering",
    "devops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration"
]

dependencies = [
    "boto3>=1.34.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "requests>=2.31.0",
    "jsonschema>=4.20.0",
    "pyyaml>=6.0.1"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.12",
    "types-jsonschema>=4.20.0",
    "types-click>=7.1.0"
]

[project.scripts]
dpn = "data_platform_naming.cli:cli"

[project.urls]
Homepage = "https://github.com/yourusername/data-platform-naming"
Documentation = "https://github.com/yourusername/data-platform-naming/docs"
Repository = "https://github.com/yourusername/data-platform-naming"
Issues = "https://github.com/yourusername/data-platform-naming/issues"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0"
]

[tool.hatch.build.targets.wheel]
packages = ["src/data_platform_naming"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=data_platform_naming",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--verbose"
]

[tool.coverage.run]
source = ["src/data_platform_naming"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "rich.*"
]
ignore_missing_imports = true
